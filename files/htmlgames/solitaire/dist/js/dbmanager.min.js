var ST_STOPPED=3;var ST_PAUSED=4;var MAX_SCORES=4;var StateManager={options:{},db:null,status:{status:ST_STOPPED,date:new Date().toUTCString(),gamesTotal:0,gamesWon:0,scoreTotal:0},gameOptions:{sound:false,background:0,cardset:0,theme:"fantasy",autoFlip:true,autoPlay:false},scores:[{nick:"Leo",score:"460",time:{h:0,m:1,s:10},location:"London",date:new Date().toUTCString()},{nick:"Nard",score:"420",time:{h:0,m:2,s:0},location:"New-York",date:new Date().toUTCString()},{nick:"Warp",score:"440",time:{h:0,m:1,s:45},location:"Zurick",date:new Date().toUTCString()},{nick:"Leo",score:"400",time:{h:0,m:2,s:15},location:"Paris",date:new Date().toUTCString()}],version:0,gameState:null,initCallback:null,scoresCallback:null,init:function(a,c){Console.log("initializing StateManager with version "+a);this.options={name:"WarpKlondike",version:a,displayName:"WarpKlondike",replace:false};this.version=a;if(typeof c!=="undefined"){this.initCallback=c}try{this.db=new Lawnchair(this.options.name)}catch(b){this.db=null}if(this.db!==null){Console.log("opened db !");this.onDepotOpened()}else{Console.log("oops ! error while opening db !");if(this.initCallback){this.initCallback(this.gameOptions,this.scores)}}},clearDB:function(){if(this.db!==null){this.db.nuke()}},getStatus:function(){return this.status},setStatus:function(a){this.saveStatus(a)},setScore:function(b,a){if((a>(MAX_SCORES-1))||(a<0)){Console.log("setScore not possible (pos="+a+", max="+(MAX_SCORES-1)+")");return false}else{Console.log("setScore possible !! (pos="+a+", max="+(MAX_SCORES-1)+")");this.scores[a]=b;this.saveScores()}},getGameOptions:function(){return this.gameOptions},setGameOptions:function(a){this.gameOptions=a;Console.log("setGameOptions: snd = "+a.sound+", back = "+a.background+", cardset= "+a.cardset+", autoFlip="+a.autoFlip+", autoPlay="+a.autoPlay+", theme="+a.theme)},setGameOption:function(a,b){this.gameOptions[a]=b},getGameOption:function(a){return this.gameOptions[a]},loadStatus:function(){Console.log("Attempting to LOAD Status Information !");Console.log(this.db);if(this.db!==null&&typeof this.db!=="undefined"){this.db.get("status",jQuery.proxy(this.onLoadStatus,this))}else{Console.log("Cannot load Status: error accessing the DataBase")}},loadGameOptions:function(){Console.log("Attempting to LOAD Options !");if(this.db!==null&&typeof this.db!=="undefined"){this.db.get("gameOptions",jQuery.proxy(this.onLoadGameOptions,this))}else{Console.log("Cannot loading gameoptions: error accessing the DataBase")}},loadScores:function(a){Console.log("Attempting to Load Scores !");if(typeof a!=="undefined"){Console.log("scores callback detected");this.scoresCallback=a}else{Console.log("scores callback NOT detected !");this.scoresCallback=null}if(this.db!==null&&typeof this.db!=="undefined"){this.db.get("scores",jQuery.proxy(this.onLoadScores,this))}else{Console.log("cannot load scores: error accessing the DataBase")}},saveScores:function(){Console.log("Attempting to Save Scores !");if(this.db!==null&&typeof this.db!=="undefined"){this.db.save({key:"scores",value:this.scores},function(a){if(a){Console.log("saved scores success !!")}else{Console.log("oops: error while saving scores: "+a)}})}else{Console.log("cannot save scores: error accessing the DataBase")}},saveStatus:function(a){Console.log("Attempting to SAVE Status Information !");var b=this;this.status=a;if(this.db!==null&&typeof this.db!=="undefined"){this.db.save({key:"status",value:a},function(c){if(c!==null){Console.log("saved status success !!");b.status=a}else{Console.log("oops: error while saving status: "+c)}})}else{Console.log("Cannot save game: error accessing the DataBase")}},saveGameOptions:function(){Console.log("Attempting to SAVE GameOptions Information !");var a=this;if(this.db!==null&&typeof this.db!=="undefined"){this.db.save({key:"gameOptions",value:this.gameOptions},function(b){if(b!==null){Console.log("saved gameoptions success !!")}else{Console.log("oops: error while saving gameoptions: "+b)}})}else{Console.log("Cannot save gameoptions: error accessing the DataBase")}},loadState:function(a){Console.log("Attempt at loading state...");if(this.db!==null&&typeof this.db!=="undefined"){this.db.get("saveGame",a)}else{Console.log("Cannot save game: error accessing the DataBase")}},saveState:function(a){Console.log("Attempt at saving state...");if(this.db!==null&&typeof this.db!=="undefined"){this.db.save({key:"saveGame",value:a},function(b){if(b){Console.log("saved success !!")}else{Console.log("oops: error while saving game: "+b)}})}else{Console.log("Cannot save game: error accessing the DataBase")}},removeState:function(){if(this.db!==null&&typeof this.db!=="undefined"){this.db.remove("saveGame",function(a){if(a){Console.log("state successfully deleted !!")}else{Console.log("oops: error while removing state game: "+a)}})}else{Console.log("Cannot deleteState: error accessing the Database...")}},onLoadSaveGame:function(a){if(a!==null){Console.log("Game Loaded !");return a.value}else{Console.log("couldn't get SaveGame !");return null}},onLoadStatus:function(a){if(a!==null){Console.log("Got status: st = "+a.value.status+", Date = "+a.value.date+"gamesTotal = "+a.value.gamesTotal+", gamesWon="+a.value.gamesWon+", scoreTotal="+a.value.scoreTotal);this.status=a.value}else{Console.log("couldn't get status ! Assume it's the first run, so we generate the object");this.saveStatus(this.status);this.removeState()}},onLoadGameOptions:function(a){if(a!==null){Console.log("Got gameOptions: snd = "+a.value.sound+", back = "+a.value.background+", cardset= "+a.value.cardset+", autoFlip="+a.value.autoFlip+", autoPlay="+a.value.autoPlay+", theme="+a.value.theme);this.gameOptions=a.value}else{Console.log("couldn't get gameOptions ! Assume it's the first run, so we generate the object with default gameOptions");this.saveGameOptions(this.gameOptions)}if(this.initCallback!==null){Console.log("yo :)");this.initCallback(this.gameOptions,this.status,this.scores)}},onLoadScores:function(a){if(a!==null){this.scores=a.value}else{Console.log("Seems like we have no local scores, let's generate default ones !");this.saveScores(this.scores);a=this.scores}if(this.scoresCallback!==null){this.scoresCallback(this.scores)}},onDepotOpened:function(){Console.log("depot successfully created/opened !");this.loadStatus();this.loadGameOptions()},onFailure:function(a){Console.log("Error opening/creating depot: "+a)}};